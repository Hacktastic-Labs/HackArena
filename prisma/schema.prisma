// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  STUDENT
  MENTOR
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  emailVerified   Boolean  @default(false) @map("email_verified")
  name            String?
  username        String?  @unique
  image           String?
  // Role of the user (STUDENT by default or MENTOR)
  role            Role     @default(STUDENT)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Better Auth relationships
  sessions        Session[]
  accounts        Account[]
  
  // Event System relationships
  organizedEvents Event[]        @relation("OrganizedEvents")
  registrations   Registration[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  accountId         String  @map("account_id")
  providerId        String  @map("provider_id")
  accessToken       String? @map("access_token")
  refreshToken      String? @map("refresh_token")
  idToken           String? @map("id_token")
  expiresAt         DateTime? @map("expires_at")
  password          String?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt      @map("updated_at")
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  
  @@unique([identifier, value])
  @@map("verifications")
}

enum RegistrationStatus {
  REGISTERED
  CHECKED_IN
  CANCELLED
}

model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?
  date          DateTime
  location      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organizerId   String
  organizer     User      @relation("OrganizedEvents", fields: [organizerId], references: [id])
  registrations Registration[]

  @@index([organizerId])
}

model Registration {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  status    RegistrationStatus @default(REGISTERED)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([userId])
}