// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  STUDENT
  MENTOR
  ADMIN
}

enum ProblemStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum AnnouncementCategory {
  GENERAL
  EVENTS
  TECHNEWS
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  emailVerified   Boolean  @default(false) @map("email_verified")
  name            String?
  username        String?  @unique
  image           String?
  skills          String[]
  // Role of the user (STUDENT by default or MENTOR)
  role            Role     @default(STUDENT)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Better Auth relationships
  sessions        Session[]
  accounts        Account[]
  
  // Event System relationships
  organizedEvents Event[]        @relation("OrganizedEvents")
  registrations   Registration[]
  
  // Problem System relationships
  problems        Problem[]      @relation("StudentProblems")  // Problems posted by this user
  mentoredProblems Problem[]     @relation("MentorProblems")   // Problems this user is mentoring
  
  // Chat System relationships
  studentConversations Conversation[] @relation("StudentConversations")
  mentorConversations  Conversation[] @relation("MentorConversations")
  sentMessages         Message[]      @relation("SentMessages")
  
  // Announcement System relationships
  announcements     Announcement[] @relation("UserAnnouncements")
  
  // Knowledge Base relationships
  knowledgeBases    KnowledgeBase[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  accountId         String  @map("account_id")
  providerId        String  @map("provider_id")
  accessToken       String? @map("access_token")
  refreshToken      String? @map("refresh_token")
  idToken           String? @map("id_token")
  expiresAt         DateTime? @map("expires_at")
  password          String?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt      @map("updated_at")
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  
  @@unique([identifier, value])
  @@map("verifications")
}

enum RegistrationStatus {
  REGISTERED
  CHECKED_IN
  CANCELLED
}

model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?
  date          DateTime
  location      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  organizerId   String
  organizer     User      @relation("OrganizedEvents", fields: [organizerId], references: [id])
  registrations Registration[]
  announcements Announcement[] @relation("EventAnnouncements")

  @@index([organizerId])
}

model Registration {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String
  event     Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  status    RegistrationStatus @default(REGISTERED)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([userId, eventId])
  @@index([eventId])
  @@index([userId])
}

model Problem {
  id          String        @id @default(cuid())
  title       String
  description String
  status      ProblemStatus @default(OPEN)
  tags        String[]      // Array of tags for the problem
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // Relationships
  userId      String        @map("user_id")
  user        User          @relation("StudentProblems", fields: [userId], references: [id], onDelete: Cascade)
  
  mentorId    String?       @map("mentor_id") // Optional mentor assigned to help
  mentor      User?         @relation("MentorProblems", fields: [mentorId], references: [id], onDelete: SetNull)
  
  // Chat
  conversations Conversation[]
  
  @@index([userId])
  @@index([mentorId])
  @@index([status])
  @@map("problems")
}

model Conversation {
  id        String   @id @default(cuid())
  problemId String   @map("problem_id")
  studentId String   @map("student_id")
  mentorId  String   @map("mentor_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  problem  Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  student  User         @relation("StudentConversations", fields: [studentId], references: [id], onDelete: Cascade)
  mentor   User         @relation("MentorConversations", fields: [mentorId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([problemId, studentId, mentorId])
  @@index([problemId])
  @@index([studentId])
  @@index([mentorId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  createdAt      DateTime     @default(now()) @map("created_at")
  senderId       String       @map("sender_id")
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([conversationId])
  @@map("messages")
}

model Announcement {
  id          String                 @id @default(cuid())
  title       String
  description String?
  category    AnnouncementCategory  @default(GENERAL)
  url         String?
  source      String?
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")

  // Relations
  createdById String?               @map("created_by_id")
  createdBy   User?                 @relation("UserAnnouncements", fields: [createdById], references: [id], onDelete: SetNull)

  eventId     String?               @map("event_id")
  event       Event?                @relation("EventAnnouncements", fields: [eventId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([createdById])
  @@index([eventId])
  @@map("announcements")
}

enum KnowledgeSourceType {
  URL
  FILE
  YOUTUBE
}

enum KnowledgeStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model KnowledgeBase {
  id         String                @id @default(cuid())
  userId     String                @map("user_id")
  title      String
  source     String
  sourceType KnowledgeSourceType
  content    Json?
  status     KnowledgeStatus       @default(PENDING)
  mimeType   String?               @map("mime_type")
  createdAt  DateTime              @default(now()) @map("created_at")
  updatedAt  DateTime              @updatedAt @map("updated_at")
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("knowledge_bases")
}